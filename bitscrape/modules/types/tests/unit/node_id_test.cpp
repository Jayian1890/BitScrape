#include <gtest/gtest.h>

#include "bitscrape/types/node_id.hpp"

using namespace bitscrape::types;

TEST(NodeIDConstruction, DefaultConstructorCreatesRandomNodeID) {
  NodeID id1;
  NodeID id2;

  EXPECT_NE(id1, id2);
}

TEST(NodeIDConstruction, ConstructionFromByteArray) {
  NodeID::IDStorage bytes = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                             0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
                             0x0F, 0x10, 0x11, 0x12, 0x13, 0x14};

  NodeID id(bytes);

  EXPECT_EQ(id.bytes(), bytes);
}

TEST(NodeIDConstruction, ConstructionFromByteVector) {
  std::vector<uint8_t> bytes = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
                                0x0F, 0x10, 0x11, 0x12, 0x13, 0x14};

  NodeID id(bytes);

  EXPECT_TRUE(std::equal(id.bytes().begin(), id.bytes().end(), bytes.begin()));
}

TEST(NodeIDConstruction, ConstructionFromHexString) {
  std::string hex = "0102030405060708090a0b0c0d0e0f1011121314";

  NodeID id(hex);

  EXPECT_EQ(id.to_hex(), hex);
}

TEST(NodeIDConstruction, ConstructionFromStringView) {
  std::string_view hex = "0102030405060708090a0b0c0d0e0f1011121314";

  NodeID id(hex);

  EXPECT_EQ(id.to_hex(), hex);
}

TEST(NodeIDConstruction, InvalidByteVectorSize) {
  std::vector<uint8_t> bytes = {0x01, 0x02, 0x03};

  EXPECT_THROW({ NodeID id(bytes); }, std::invalid_argument);
}

TEST(NodeIDConstruction, InvalidHexStringLength) {
  std::string hex = "0102";

  EXPECT_THROW({ NodeID id(hex); }, std::invalid_argument);
}

TEST(NodeIDConstruction, InvalidHexStringCharacters) {
  // Use a string with an invalid hex character 'g'
  std::string hex = "0102030405060708090a0b0c0d0e0f10111213g4";

  EXPECT_THROW({ NodeID id(hex); }, std::invalid_argument);
}

TEST(NodeIDOperations, ToHex) {
  NodeID::IDStorage bytes1 = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                              0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
                              0x0F, 0x10, 0x11, 0x12, 0x13, 0x14};

  NodeID::IDStorage bytes2 = {0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                              0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
                              0x1F, 0x20, 0x21, 0x22, 0x23, 0x24};

  NodeID id1(bytes1);
  NodeID id2(bytes2);

  EXPECT_EQ(id1.to_hex(), "0102030405060708090a0b0c0d0e0f1011121314");
  EXPECT_EQ(id2.to_hex(), "1112131415161718191a1b1c1d1e1f2021222324");
}

TEST(NodeIDOperations, Distance) {
  NodeID::IDStorage bytes1 = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                              0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
                              0x0F, 0x10, 0x11, 0x12, 0x13, 0x14};

  NodeID::IDStorage bytes2 = {0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                              0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
                              0x1F, 0x20, 0x21, 0x22, 0x23, 0x24};

  NodeID id1(bytes1);
  NodeID id2(bytes2);

  NodeID dist = id1.distance(id2);

  NodeID::IDStorage expected = {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                                0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                                0x10, 0x30, 0x30, 0x30, 0x30, 0x30};

  EXPECT_EQ(dist.bytes(), expected);
}

TEST(NodeIDOperations, DistanceAsync) {
  NodeID::IDStorage bytes1 = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                              0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
                              0x0F, 0x10, 0x11, 0x12, 0x13, 0x14};

  NodeID::IDStorage bytes2 = {0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                              0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
                              0x1F, 0x20, 0x21, 0x22, 0x23, 0x24};

  NodeID id1(bytes1);
  NodeID id2(bytes2);

  auto future = id1.distance_async(id2);
  NodeID dist = future.get();

  NodeID::IDStorage expected = {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                                0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                                0x10, 0x30, 0x30, 0x30, 0x30, 0x30};

  EXPECT_EQ(dist.bytes(), expected);
}

TEST(NodeIDOperations, Random) {
  NodeID random1 = NodeID::random();
  NodeID random2 = NodeID::random();

  EXPECT_NE(random1, random2);
}

TEST(NodeIDOperations, RandomAsync) {
  NodeID::IDStorage bytes1 = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                              0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
                              0x0F, 0x10, 0x11, 0x12, 0x13, 0x14};

  NodeID::IDStorage bytes2 = {0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                              0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
                              0x1F, 0x20, 0x21, 0x22, 0x23, 0x24};

  NodeID id1(bytes1);
  NodeID id2(bytes2);

  auto future = NodeID::random_async();
  NodeID random = future.get();

  EXPECT_NE(random, id1);
  EXPECT_NE(random, id2);
}

TEST(NodeIDOperations, ComparisonOperators) {
  NodeID::IDStorage bytes1 = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                              0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
                              0x0F, 0x10, 0x11, 0x12, 0x13, 0x14};

  NodeID::IDStorage bytes2 = {0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                              0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
                              0x1F, 0x20, 0x21, 0x22, 0x23, 0x24};

  NodeID id1(bytes1);
  NodeID id2(bytes2);

  EXPECT_EQ(id1, id1);
  EXPECT_NE(id1, id2);
  EXPECT_LT(id1, id2);
  EXPECT_GT(id2, id1);
  EXPECT_LE(id1, id1);
  EXPECT_LE(id1, id2);
  EXPECT_GE(id2, id2);
  EXPECT_GE(id2, id1);
}
